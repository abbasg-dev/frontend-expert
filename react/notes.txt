Introduction
React is one of the most popular frontend libraries to create performant and maintainable user interfaces.

React Basics

React
A JavaScript library developed by Facebook for building user interfaces. React uses a component-based architecture to create interfaces with an intuitive declarative approach.

Component
A reusable independent piece of a user interface. In modern React, components are usually functional components, which are simply functions that return JSX.

JSX
Short for JavaScript XML, a JavaScript syntax extension for inlining XML and HTML in JavaScript.

ReactDOM
A package used with React to work as the bridge between React elements and the actual DOM in the browser. The most frequently used ReactDOM function is the render function, which adds a component to the DOM.

React.Fragment
A React container component that renders its children without adding any additional DOM nodes. This can be used for returning multiple adjacent elements without wrapping them in an unnecessary element.

Fragments can also be created by using an empty tag, rather than the Fragment export from React.

Conditional Rendering
The process of changing the returned element of a component based on some condition. Conditional rendering can be achieved in a variety of ways, but the most common utilizes ternary operators or short circuit evaluation. This works because null, undefined, true and false all do not render anything.

Props
A JavaScript object passed as a parameter to functional components, containing all of the key-value pairs that were passed as attributes to the component.

Event-Driven Programming

SyntheticEvent
The object type passed to React event handler functions. Synthetic events generally work the same as native events, but with more consistency across browsers.

State
Data specific to an instance of a component that persists between renders and causes re-renders when changed.

Hook
A JavaScript function used to "hook" into React features such as state and the larger component lifecycle. The names of hooks always begin with use, and they cannot be called conditionally.

useState
A React hook for creating stateful components. The useState function takes in an initial state value (or a function that returns that initial value), and it returns an array with two elements: the current state value and a setter function.

useReducer
An alternative React hook for creating stateful components, oftentimes used for more complex state. The useReducer function takes in a reducer function and the initial state. It returns an array with two elements: the current state value and a dispatch function.
The reducer function takes in the previous state and an action object as parameters, then it returns the new state. Usually the action object will have a type property, which will be used in a switch statement.
The dispatch function will then take in an object, which will be passed as the action to the reducer function.

Lifting State Up
A common React pattern of moving shared state up to the lowest common ancestor component in the tree. This allows for a single component to keep track of the state and pass the current value and setter function down through props.

Controlled Component
A pattern of using React state to control the current state of an input, rather than allowing the native elements to control their own state (known as an uncontrolled component).

Component Lifecycle
The different stages that an instance of a component goes through. There are three primary stages to the React lifecycle:
1. Mounting: The component renders for the first time.
2. Updating: The component re-renders whenever state changes or the props are updated by the parent component. A component can update many times without ever mounting again.
3. Unmounting: The component is removed from the DOM. This is the final stage of the lifecycle, and a component cannot update again once it has been unmounted. However, a new instance of the component can still be mounted.

useEffect
A React hook for performing side effects around the component lifecycle. The useEffect hook takes in a callback function and an optional dependency array.
If no dependency array is provided, the callback function will run on every render. If there is a dependency array provided, the callback function will only run on mount or when an item in that array has changed (note that objects must be new objects to be considered to have changed). To avoid bugs related to effects using stale values from previous renders, the dependency array should contain all values that the callback uses that could change between renders.
The callback function can also return a cleanup function, which will run on unmount and before the main effect function runs on any re-renders.

useLayoutEffect
A React hook for performing side effects around the component lifecycle in the same way as useEffect. The only difference between the two functions is that useLayoutEffect works synchronously, meaning the effects always finish running before the browser paints. This hook should only be used for effects that will make visual changes to the DOM, because otherwise the synchronous nature will give worse performance than useEffect without any benefits.

Ref
A React value specific to an instance of a component that persists between renders, but updating the value does not cause a re-render (unlike state). Refs are oftentimes used to reference the DOM node associated with the component, which can be achieved with the ref attribute.

useRef
A React hook for creating a ref. The useRef hook takes in an initial value and returns a ref. The ref is simply an object with a current property set to the current value.

React.forwardRef
A function used by a custom component to forward a ref attribute on to a child element. The forwardRef function is a higher-order component function, meaning it takes in a component and returns a new one. In this case, it takes a component that has a second parameter for the ref.
